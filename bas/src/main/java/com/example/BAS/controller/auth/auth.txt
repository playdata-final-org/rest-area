1.session vs JWT
    - 세션: (1)간편한 구현 - 프레임워크나 라이브러리를 통한 간편한 구현
           (2)서버에서 세션관리 - 서버 측에서 세션을 관리하기 때문에 만료 및 갱신 로그아웃 등을 쉽게 처리가능

           (1)상태를 유지해야함: 서버의 부하가 증가
           (2)서버의 확장성 제한: 여러 서버간에 세션을 동기화해야기 때문

    -JWT: (1)상태를 유지 안해도 됨: 서버의 부하 줄어듬
          (2)서버의 확장성 뛰어남
          (3)클라이언트 측에서 상태 관리 -> 서버에서 클라이언트 식별하는데 유용

          (1) 토큰 크기가 커짐 = 인코딩되어 크기가 커짐
          (2) 토큰이 만료되면 새로운 토큰 발급,관리

    그래서? 세션은 간단한 웹에서 적절
           JWT는 분산환경에서 확장성이 중요하거나 클라이언트와 서버간에 독립적인 통신이 필요한 경우 적합

           이번 프로젝트는 확장성이 중요하지 않다고 생각하며
           세션의 서버부하는 redis와 같은 외부 스토리지에 저장해서 감소하고 세션공유하고 동기화시킴으로써 단점 보완


2.회원가입 유효성 검증을 프론트에서 처리 vs 백에서 처리
    1.프론트 - 1. 보안문제:악의적인 사용자는 프론트를 우회하거나 조작하여 무효화된 데이터를 서버로 전송가능 ㄷㄷ
             2. 데이터무결성: 사용자가 직접 데이터를 조작하거나 우회, 무결성 보장 x
             3. 다양한 플랫폼 및 클라이언트 호환성 x
             4. 사용자 경험 저하: 입력 오류를 서버에 전송하기 전까지 확인 못함
             5.코드 중복성 : 백이랑 프론트에서 둘다 구현해야 할 수 가 있음. 유지보수가 어려워짐



